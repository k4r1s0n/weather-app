{"version":3,"sources":["components/Info.js","components/Form.js","components/Weather.js","App.js","serviceWorker.js","index.js"],"names":["Info","react_default","a","createElement","className","type","data-toggle","aria-haspopup","aria-expanded","React","Component","Form","onSubmit","this","props","weatherMethod","name","placeholder","id","class","style","color","Weather","city","country","alt","src","icon","temp","dscrptn","pressure","humidity","tempMin","tempMax","error","API_KEY","App","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","getWeather","_ref","asyncToGenerator","regenerator_default","mark","_callee","event","latitude","longitude","apiUrlCity","apiUrlCoord","currentData","userData","roundTemp","roundMinTemp","roundMaxTemp","capitalizeFirstLetter","errorMessage","wrap","_context","prev","next","navigator","geolocation","getCurrentPosition","position","coords","preventDefault","target","elements","value","console","log","fetch","concat","sent","json","data","weather","Math","round","string","split","map","word","toUpperCase","substring","join","code","cod","setState","main","sys","temp_min","temp_max","description","stop","_x","apply","arguments","state","bind","assertThisInitialized","components_Info","components_Form","components_Weather","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2d6e3697.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass Info extends React.Component {\r\n  render() {\r\n    return(\r\n      <div className=\"text-center\">\r\n        <h1>Weather Application</h1>\r\n        <div className=\"btn-group info-button\">\r\n          <button type=\"button\" className=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n            Weather in current location\r\n          </button>\r\n          <div className=\"dropdown-menu dropdown-menu-right\">\r\n            <p>Press Search without entering city and country</p>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"btn-group info-button\">\r\n          <button type=\"button\" className=\"btn btn-primary dropdown-toggle\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\r\n            Weather in another location\r\n          </button>\r\n          <div className=\"dropdown-menu dropdown-menu-right\">\r\n            <p>Please enter your city and country and press Search</p>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default Info;","import React from \"react\";\r\n\r\nclass Form extends React.Component {\r\n  render() {\r\n    return(\r\n      <div className=\"container-fluid\">\r\n        <h5>Enter your city and country</h5>\r\n        <form onSubmit={this.props.weatherMethod}>\r\n          <input type=\"text\" name=\"city\" placeholder=\"Los Angeles, US\"/>\r\n          <button id=\"search-btn\" className=\"btn btn-success\"><i class=\"fas fa-sun\"></i> Search</button>\r\n        </form>\r\n      </div>\r\n      \r\n    );\r\n  }\r\n}\r\nexport default Form;","import React from \"react\";\r\n\r\nconst style= {color: \"#66ffff\"};\r\nclass Weather extends React.Component {\r\n  render() {\r\n    if(this.props.city !== '') {\r\n      return(\r\n        <div>\r\n          <h2><span style={style}>{this.props.city}, {this.props.country}</span></h2>\r\n          <p><img alt=\"icon\"src={this.props.icon}></img> <span style={style}>{this.props.temp}°C</span></p>\r\n          <p><span style={style}>{this.props.dscrptn}</span></p>\r\n          <p>Pressure: <span style={style}>{this.props.pressure} hpa</span></p>\r\n          <p>Humidity: <span style={style}>{this.props.humidity} %</span></p>\r\n          <p>Min Temperature: <span style={style}>{this.props.tempMin}°C</span></p>\r\n          <p>Max Temperature: <span style={style}>{this.props.tempMax}°C</span></p>\r\n        </div>\r\n      );\r\n    } else {\r\n      return(\r\n        <div>\r\n          <p>{this.props.error}</p>\r\n        </div>\r\n      );\r\n    }\r\n  }\r\n}\r\nexport default Weather;","import React from \"react\";\nimport Info from \"./components/Info\";\nimport Form from \"./components/Form\";\nimport Weather from \"./components/Weather\";\n\nconst API_KEY = \"b31e00def348fa90ff280124c0e4d3b8\";\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      temp: \"\",\n      city: \"\",\n      country: \"\",\n      pressure: \"\",\n      humidity: \"\",\n      tempMin: \"\",\n      tempMax: \"\",\n      dscrptn: \"\",\n      icon: \"\",\n      error: \"\"\n    };\n    this.getWeather = this.getWeather.bind(this);\n  }\n\n  getWeather = async event => {\n    let latitude;\n    let longitude;\n    if (navigator.geolocation) {\n      //check if geolocation is available\n      navigator.geolocation.getCurrentPosition(function(position) {\n        latitude = position.coords.latitude;\n        longitude = position.coords.longitude;\n      });\n    }\n    event.preventDefault();\n    const city = event.target.elements.city.value;\n    console.log(city);\n    const apiUrlCity = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${API_KEY}&units=metric`\n    );\n    const apiUrlCoord = await fetch(\n      `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${API_KEY}&units=metric`\n    );\n    const currentData = await apiUrlCoord.json();\n    const userData = await apiUrlCity.json();\n    console.log(currentData);\n    console.log(userData);\n    const icon = data =>\n      `https://openweathermap.org/img/w/${data.weather[0].icon}.png`;\n    const roundTemp = temp => Math.round(temp);\n    const roundMinTemp = temp => Math.round(temp);\n    const roundMaxTemp = temp => Math.round(temp);\n    const capitalizeFirstLetter = string => {\n      return string\n        .split(/\\s+/)\n        .map(word => word[0].toUpperCase() + word.substring(1))\n        .join(\" \");\n    };\n    const errorMessage = code => {\n      if (code === \"404\") {\n        return \"Enter your city correctly\";\n      } else if (code === \"400\") {\n        return \"Geolocation is not supported\";\n      }\n    };\n    if (city === \"\" && currentData.cod !== \"400\") {\n      this.setState({\n        temp: roundTemp(currentData.main.temp),\n        city: currentData.name,\n        country: currentData.sys.country,\n        pressure: currentData.main.pressure,\n        humidity: currentData.main.humidity,\n        tempMin: roundMinTemp(currentData.main.temp_min),\n        tempMax: roundMaxTemp(currentData.main.temp_max),\n        dscrptn: capitalizeFirstLetter(currentData.weather[0].description),\n        icon: icon(currentData),\n        error: \"\"\n      });\n    } else if (userData.cod === \"404\") {\n      this.setState({\n        temp: \"\",\n        city: \"\",\n        country: \"\",\n        pressure: \"\",\n        humidity: \"\",\n        tempMin: \"\",\n        tempMax: \"\",\n        dscrptn: \"\",\n        icon: \"\",\n        error: errorMessage(userData.cod)\n      });\n    } else if (currentData.cod === \"400\" && userData.cod === \"400\") {\n      this.setState({\n        temp: \"\",\n        city: \"\",\n        country: \"\",\n        pressure: \"\",\n        humidity: \"\",\n        tempMin: \"\",\n        tempMax: \"\",\n        dscrptn: \"\",\n        icon: \"\",\n        error: errorMessage(currentData.cod)\n      });\n    } else {\n      this.setState({\n        temp: roundTemp(userData.main.temp),\n        city: userData.name,\n        country: userData.sys.country,\n        pressure: userData.main.pressure,\n        humidity: userData.main.humidity,\n        tempMin: roundMinTemp(userData.main.temp_min),\n        tempMax: roundMaxTemp(userData.main.temp_max),\n        dscrptn: capitalizeFirstLetter(userData.weather[0].description),\n        icon: icon(userData),\n        error: \"\"\n      });\n    }\n  };\n  render() {\n    return (\n      <div id=\"app\" className=\"container\">\n        <div id=\"wrap\" className=\"row\">\n          <div id=\"info\" className=\"col-md-6\">\n            <Info />\n          </div>\n          <div id=\"form\" className=\"col-md-6\">\n            <Form weatherMethod={this.getWeather} />\n            <Weather\n              temp={this.state.temp}\n              city={this.state.city}\n              country={this.state.country}\n              pressure={this.state.pressure}\n              humidity={this.state.humidity}\n              tempMin={this.state.tempMin}\n              tempMax={this.state.tempMax}\n              dscrptn={this.state.dscrptn}\n              icon={this.state.icon}\n              error={this.state.error}\n            />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\t\r\n// register() is not called by default.\t\r\n\r\n // This lets the app load faster on subsequent visits in production, and gives\t\r\n// it offline capabilities. However, it also means that developers (and users)\t\r\n// will only see deployed updates on subsequent visits to a page, after all the\t\r\n// existing tabs open on the page have been closed, since previously cached\t\r\n// resources are updated in the background.\t\r\n\r\n // To learn more about the benefits of this model and instructions on how to\t\r\n// opt-in, read http://bit.ly/CRA-PWA\t\r\n\r\nconst isLocalhost = Boolean(\t\r\n    window.location.hostname === 'localhost' ||\t\r\n      // [::1] is the IPv6 localhost address.\t\r\n      window.location.hostname === '[::1]' ||\t\r\n      // 127.0.0.1/8 is considered localhost for IPv4.\t\r\n      window.location.hostname.match(\t\r\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\t\r\n      )\t\r\n  );\t\r\n  \r\n   export function register(config) {\t\r\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\t\r\n      // The URL constructor is available in all browsers that support SW.\t\r\n      const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\t\r\n      if (publicUrl.origin !== window.location.origin) {\t\r\n        // Our service worker won't work if PUBLIC_URL is on a different origin\t\r\n        // from what our page is served on. This might happen if a CDN is used to\t\r\n        // serve assets; see https://github.com/facebook/create-react-app/issues/2374\t\r\n        return;\t\r\n      }\t\r\n  \r\n       window.addEventListener('load', () => {\t\r\n        const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\t\r\n  \r\n         if (isLocalhost) {\t\r\n          // This is running on localhost. Let's check if a service worker still exists or not.\t\r\n          checkValidServiceWorker(swUrl, config);\t\r\n  \r\n           // Add some additional logging to localhost, pointing developers to the\t\r\n          // service worker/PWA documentation.\t\r\n          navigator.serviceWorker.ready.then(() => {\t\r\n            console.log(\t\r\n              'This web app is being served cache-first by a service ' +\t\r\n                'worker. To learn more, visit http://bit.ly/CRA-PWA'\t\r\n            );\t\r\n          });\t\r\n        } else {\t\r\n          // Is not localhost. Just register service worker\t\r\n          registerValidSW(swUrl, config);\t\r\n        }\t\r\n      });\t\r\n    }\t\r\n  }\t\r\n  \r\n   function registerValidSW(swUrl, config) {\t\r\n    navigator.serviceWorker\t\r\n      .register(swUrl)\t\r\n      .then(registration => {\t\r\n        registration.onupdatefound = () => {\t\r\n          const installingWorker = registration.installing;\t\r\n          if (installingWorker == null) {\t\r\n            return;\t\r\n          }\t\r\n          installingWorker.onstatechange = () => {\t\r\n            if (installingWorker.state === 'installed') {\t\r\n              if (navigator.serviceWorker.controller) {\t\r\n                // At this point, the updated precached content has been fetched,\t\r\n                // but the previous service worker will still serve the older\t\r\n                // content until all client tabs are closed.\t\r\n                console.log(\t\r\n                  'New content is available and will be used when all ' +\t\r\n                    'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\t\r\n                );\t\r\n  \r\n                 // Execute callback\t\r\n                if (config && config.onUpdate) {\t\r\n                  config.onUpdate(registration);\t\r\n                }\t\r\n              } else {\t\r\n                // At this point, everything has been precached.\t\r\n                // It's the perfect time to display a\t\r\n                // \"Content is cached for offline use.\" message.\t\r\n                console.log('Content is cached for offline use.');\t\r\n  \r\n                 // Execute callback\t\r\n                if (config && config.onSuccess) {\t\r\n                  config.onSuccess(registration);\t\r\n                }\t\r\n              }\t\r\n            }\t\r\n          };\t\r\n        };\t\r\n      })\t\r\n      .catch(error => {\t\r\n        console.error('Error during service worker registration:', error);\t\r\n      });\t\r\n  }\t\r\n  \r\n   function checkValidServiceWorker(swUrl, config) {\t\r\n    // Check if the service worker can be found. If it can't reload the page.\t\r\n    fetch(swUrl)\t\r\n      .then(response => {\t\r\n        // Ensure service worker exists, and that we really are getting a JS file.\t\r\n        const contentType = response.headers.get('content-type');\t\r\n        if (\t\r\n          response.status === 404 ||\t\r\n          (contentType != null && contentType.indexOf('javascript') === -1)\t\r\n        ) {\t\r\n          // No service worker found. Probably a different app. Reload the page.\t\r\n          navigator.serviceWorker.ready.then(registration => {\t\r\n            registration.unregister().then(() => {\t\r\n              window.location.reload();\t\r\n            });\t\r\n          });\t\r\n        } else {\t\r\n          // Service worker found. Proceed as normal.\t\r\n          registerValidSW(swUrl, config);\t\r\n        }\t\r\n      })\t\r\n      .catch(() => {\t\r\n        console.log(\t\r\n          'No internet connection found. App is running in offline mode.'\t\r\n        );\t\r\n      });\t\r\n  }\t\r\n  \r\n   export function unregister() {\t\r\n    if ('serviceWorker' in navigator) {\t\r\n      navigator.serviceWorker.ready.then(registration => {\t\r\n        registration.unregister();\t\r\n      });\t\r\n    }\t\r\n  }","import React from 'react';\t\r\nimport ReactDOM from 'react-dom';\t\r\nimport './index.css';\t\r\nimport App from './App';\t\r\nimport './App.css'\r\nimport \"bootstrap/dist/css/bootstrap.min.css\"\r\nimport * as serviceWorker from './serviceWorker';\t\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\t\r\n\r\n // If you want your app to work offline and load faster, you can change\t\r\n// unregister() to register() below. Note this comes with some pitfalls.\t\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\t\r\nserviceWorker.unregister();"],"sourceRoot":""}